import type { FormField } from "./generate-field-json.js";

import { convertFieldJsonToFdf } from "./convert-field-json-to-fdf.js";

// https://github.com/lodash/lodash/blob/master/mapKey.js
/**
 * This method creates an object with the same values as `object` and
 * keys generated by running each own enumerable string keyed property
 * of `object` thru `iteratee`. The iteratee is invoked with three
 * arguments: (value, key, object).
 *
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @example
 *
 * mapKey({ 'a': 1, 'b': 2 }, function(value, key) {
 *   return key + value
 * })
 * // => { 'a1': 1, 'b2': 2 }
 */
const mapKeys = (
  object: Record<string, string>,
  iteratee: (
    value: unknown,
    key: number | string,
    indexObject: Record<string, string>,
  ) => string,
) => {
  const result: Record<string, string> = {};
  for (const [key, value] of Object.entries(object)) {
    result[iteratee(value, key, object)] = value;
  }
  return result;
};

/**
 * This function converts the field names of a JSON object
 * to the field names of a PDF Form.
 * @param {FormField[]} formFields - The fields in the PDF
 * @param {*} convMap - The conversion matrix
 */
export const mapFormToPdf = (
  formFields: FormField[],
  convMap: Record<string, string>,
): Record<string, string> =>
  mapKeys(
    convertFieldJsonToFdf(formFields),
    // @ts-expect-error I'm not sure why this is not type safe
    (value: unknown, key: number | string) => {
      if (Object.prototype.hasOwnProperty.call(convMap, key)) {
        // This is an acceptable risk. We are assuming the developer knows the PDF being used.
        // eslint-disable-next-line security/detect-object-injection
        return convMap[key];
      }
      return key as string;
    },
  );
